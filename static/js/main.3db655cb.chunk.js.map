{"version":3,"sources":["game/board.svg","Util.js","game/Hex.js","main/Main.js","game/UI.js","game/HexUtil.js","game/Board.js","game/Game.js","ranking/Ranking.js","App.js","index.js"],"names":["module","exports","Util","colors","fontColor","buttonColor","bg1","bg2","randomIndex","array","Math","round","random","length","randomValue","HexTypes","FIRE","WATER","EARTH","WIND","PLANT","HexTypesArray","Object","values","HexBg","viewBox","id","style","stopColor","stopOpacity","offset","xlinkHref","x1","y1","x2","y2","gradientUnits","transform","fill","fillOpacity","stroke","strokeWidth","strokeMiterlimit","strokeDasharray","strokeOpacity","d","display","HexShape","HexLightsShadows","Hex","props","icon","color","iconStyle","hexStyle","selected","animation","bgStyle","position","top","width","textAlign","data","fontSize","gameRatio","type","faPlay","faTrophy","faCheck","faFireAlt","faWater","faMountain","faWind","faLeaf","css","letter","Main","height","flexDirection","alignItems","justifyContent","min","gameWidth","gameHeight","buttons","onClick","events","play","key","ranking","landscape","className","filter","uiBgImage","ScoreAndMoves","labelStyle","padding","textStyle","uiSize","zIndex","backgroundImage","fontWeight","gameSession","score","flexGrow","moves","HexesPowers","useEffect","pos","forEach","ht","document","getElementById","getBoundingClientRect","onScoresPositions","scores","map","uiStyle","HexUtil","N","NE","SE","S","SW","NW","getDirection","hexFrom","hexTo","x","y","getHex","board","direction","toHex","findMatchesFor","hex","match","matches","push","findMatches","concat","GS_INIT","GS_READY","GS_UNMATCH","GS_MATCH","GS_EXPLOSION","GS_FALL","GS_OVER","noHex","leftIni","topIni","leftOffset","topOffset","typesBuffer","getType","splice","init","state","fallFrom","totalCount","Board","useState","gameState","setGameState","slots","setSlots","selectedHex","setSelectedHex","setMatches","hexes","qtdAnimations","forHex","onHex","calcPos","unit","left","buildAnimationInit","pos1","pos2","anim","keyframes","from","to","bottomPos","hexPos","animationDuration","buildAnimation","target","buildAnimationUnmatch","buildAnimationMatch","boardRect","hexRect","scoreRect","getScoresPositions","dest","buildAnimationExplosion","buildAnimationOver","setGameReady","gameOver","buildSlots","setExplosionState","explosionCenter","reduce","total","clearHexesStates","hexesX","newSlots","posStyle","hexesItems","hexItem","onClickHex","onAnimationEnd","pointsEarned","onMatch","explodedHexes","indexOf","yUp","hexToFall","pop","onGameOver","onMove","boardSize","bg","backgroundSize","Game","setGameSession","setGameOver","boardEvents","scoresPositions","pointerEvents","defaultRanking","name","Ranking","JSON","parse","localStorage","getItem","rating","new","newPos","findIndex","onRatingName","event","value","overflowY","ratingStyle","margin","borderRadius","inputStyle","border","backgroundColor","right","minSize","scoreStyle","ratings","i","autoFocus","onChange","marginBottom","setItem","stringify","main","bodyRect","body","overflow","App","appContent","setData","setState","setScore","updateAppSize","setTimeout","window","addEventListener","newScore","ReactDOM","render"],"mappings":"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","file":"static/js/main.3db655cb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/board.310b02e2.svg\";","// Utilities\r\nconst Util = {\r\n\t// Game colors.\r\n\tcolors: {\r\n\t\tfontColor: \"antiquewhite\",\r\n\t\tbuttonColor: \"burlywood\",\r\n\t\tbg1: \"#434343ff\",\r\n\t\tbg2: \"#848484ff\"\r\n\t},\r\n\r\n\t// Returns a random index from an array.\r\n\trandomIndex: (array) => {\r\n\t\treturn Math.round(Math.random() * (array.length - 1));\r\n\t},\r\n\r\n\t// Returns a random element from array.\r\n\trandomValue: (array) => {\r\n\t\treturn array[Util.randomIndex(array)];\r\n\t}\r\n}\r\n\r\nexport default Util;","/** @jsx jsx */\r\n\r\nimport { jsx, css } from \"@emotion/core\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faFireAlt, faWater, faMountain, faWind, faLeaf, faPlay, faTrophy, faCheck } from '@fortawesome/free-solid-svg-icons';\r\nimport Util from \"../Util\";\r\n\r\n// Hex types.\r\nconst HexTypes = {\r\n\tFIRE: \"fire\",\r\n\tWATER: \"water\",\r\n\tEARTH: \"earth\",\r\n\tWIND: \"wind\",\r\n\tPLANT: \"plant\"\r\n};\r\nconst HexTypesArray = Object.values(HexTypes);\r\n\r\n// Hex bg image.\r\nconst HexBg = () =>\r\n\t<svg viewBox=\"-4 -4 144 130\">\r\n\t<defs>\r\n\t\t<linearGradient\r\n\t\t\tid=\"linearGradient865\">\r\n\t\t\t<stop style={{stopColor:\"#1c1d1c\",stopOpacity:1}} offset=\"0\" id=\"stop861\" />\r\n\t\t\t<stop style={{stopColor:\"#494849\",stopOpacity:1}} offset=\"1\" id=\"stop863\" />\r\n\t\t<linearGradient id=\"linearGradient902\">\r\n\t\t\t<stop style={{stopColor:\"#1c1d1c\",stopOpacity:1}} offset=\"0\" id=\"stop898\" />\r\n\t\t\t<stop style={{stopColor:\"#424344\",stopOpacity:1}} offset=\"1\" id=\"stop900\" />\r\n\t\t</linearGradient>\r\n\t\t</linearGradient>\r\n\t\t<linearGradient xlinkHref=\"#linearGradient865\" id=\"linearGradient871\"\r\n\t\t\tx1=\"33.31208\" y1=\"177.15852\"\r\n\t\t\tx2=\"101.88778\" y2=\"295.48209\"\r\n\t\t\tgradientUnits=\"userSpaceOnUse\" />\r\n\t\t<linearGradient xlinkHref=\"#linearGradient902\" id=\"linearGradient904\"\r\n\t\t\tx1=\"101.67748\" y1=\"120.29309\"\r\n\t\t\tx2=\"35.390953\" y2=\"1.5915558\"\r\n\t\t\tgradientUnits=\"userSpaceOnUse\" />\r\n\t</defs>\r\n\t<g transform=\"translate(0,-175)\">\r\n\t\t<path\r\n\t\t\tstyle={{fill:\"url(#linearGradient871)\",fillOpacity:1,stroke:\"none\",strokeWidth:5,strokeMiterlimit:4,strokeDasharray:\"none\",strokeOpacity:1}}\r\n\t\t\td=\"m 120.62458,266.36089 c -20.37473,35.29009 -11.92228,30.41006 -52.67176,30.41006 -40.749477,0 -32.297026,4.88002 -52.671764,-30.41006 -20.3747383,-35.29008 -20.3747383,-25.53003 0,-60.82011 20.374738,-35.29008 11.922288,-30.41006 52.671764,-30.41006 40.74948,0 32.29703,-4.88002 52.67176,30.41006 20.37474,35.29008 20.37474,25.53003 0,60.82011 z\"\r\n\t\t\t/>\r\n\t</g>\r\n\t<g>\r\n\t\t<path\r\n\t\t\tstyle={{display:\"inline\",fill:\"none\",fillOpacity:1,stroke:\"url(#linearGradient904)\",strokeWidth:4,strokeMiterlimit:4,strokeDasharray:\"none\",strokeOpacity:1}}\r\n\t\t\td=\"m 120.62459,91.360892 c -20.37474,35.290088 -11.92229,30.410058 -52.67177,30.410058 -40.749479,0 -32.297028,4.88003 -52.671768,-30.410059 C -5.0936869,56.070807 -5.0936869,65.830857 15.281053,30.540773 35.655792,-4.7493108 27.203341,0.13071424 67.95282,0.13071442 c 40.74948,1.8e-7 32.29703,-4.88002492 52.67177,30.41005958 20.37474,35.290084 20.37474,25.530034 0,60.820118 z\"\r\n\t\t\t/>\r\n\t</g>\r\n\t</svg>\r\n\r\n// Hex shape.\r\nconst HexShape = () => <path d=\"m 120.62458,266.36089 c -20.37473,35.29009 -11.92228,30.41006 -52.67176,30.41006 -40.749477,0 -32.297026,4.88002 -52.671764,-30.41006 -20.3747383,-35.29008 -20.3747383,-25.53003 0,-60.82011 20.374738,-35.29008 11.922288,-30.41006 52.671764,-30.41006 40.74948,0 32.29703,-4.88002 52.67176,30.41006 20.37474,35.29008 20.37474,25.53003 0,60.82011 z\" />\r\n\r\n// Lights and shadows.\r\nconst HexLightsShadows = () =>\r\n\t<g>\r\n\t\t<path\r\n\t\t\tstyle={{fill:\"#ffffff\",fillOpacity:0.5,stroke:\"none\"}}\r\n\t\t\td=\"M 24.46745,37.310295 C 5.7151846,68.789506 -6.3341638,69.596515 17.397721,33.186606 37.772461,-2.1034773 29.32001,2.7765477 70.069489,2.7765479 c 40.749481,2e-7 47.646671,9.9088231 7.314628,8.4874391 C 33.191732,9.7065573 41.200266,6.3951923 24.46745,37.310295 Z\"\r\n\t\t\t/>\r\n\t\t<path\r\n\t\t\tstyle={{fill:\"#000000\",fillOpacity:0.5,stroke:\"none\"}}\r\n\t\t\td=\"m 111.88455,85.671883 c 20.00022,-36.493381 32.12453,-31.946038 7.06973,4.652857 -20.374765,35.29011 -11.93304,29.47407 -52.671795,30.41008 -41.127458,0.94494 -47.659366,-10.01474 -7.314632,-9.01661 40.034677,0.99046 36.183852,2.41195 52.916697,-26.046327 z\"\r\n\t\t\t/>\r\n\t</g>\r\n\r\n// An hexagon.\r\nfunction Hex(props) {\r\n\t// Styles\r\n\tlet hexStyle = {\r\n\t\tcolor: \"black\",\r\n\t\tstroke: (props.selected) ? \"white\" : \"black\",\r\n\t\tstrokeWidth: 4,\r\n\t\tfill: \"currentColor\",\r\n\t\tanimation: props.animation\r\n\t};\r\n\r\n\t// BG style.\r\n\tconst bgStyle = {\r\n\t\tcolor: \"gold\",\r\n\t\tposition: \"absolute\",\r\n\t\ttop: 0,\r\n\t\twidth: \"100%\",\r\n\t\ttextAlign: \"center\"\r\n\t};\r\n\r\n\tif (props.data) {\r\n\t\tbgStyle.fontSize = (8 * props.data.gameRatio) + \"vmin\";\r\n\t}\r\n\r\n\t// Selects hex type.\r\n\tlet icon;\r\n\tlet color;\r\n\tlet iconStyle;\r\n\tswitch (props.type) {\r\n\t\t// Button types.\r\n\t\tcase \"play\": icon = faPlay; color = Util.colors.buttonColor; break;\r\n\t\tcase \"ranking\": icon = faTrophy; color = Util.colors.buttonColor; break;\r\n\t\tcase \"back\": icon = faCheck; color = Util.colors.buttonColor; break;\r\n\r\n\t\t// Game types.\r\n\t\tcase HexTypes.FIRE: icon = faFireAlt; color = \"orange\"; break;\r\n\t\tcase HexTypes.WATER: icon = faWater; color = \"deepskyblue\"; break;\r\n\t\tcase HexTypes.EARTH: icon = faMountain; color = \"brown\"; break;\r\n\t\tcase HexTypes.WIND: icon = faWind; color = \"white\"; break;\r\n\t\tcase HexTypes.PLANT: icon = faLeaf; color = \"green\"; break;\r\n\t\tdefault:\r\n\t\t\ticon = null;\r\n\t\t\thexStyle = css(\r\n\t\t\t\thexStyle,\r\n\t\t\t\t{\r\n\t\t\t\t\tfill: \"none\",\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t\tbreak;\r\n\t}\r\n\ticonStyle = css({\r\n\t\tcolor: color\r\n\t})\r\n\r\n\t// Hex\r\n\tlet hex = \r\n\t\t<div css={hexStyle} {...props}>\r\n\t\t\t{ (icon) ? (\r\n\t\t\t\t<svg viewBox=\"-4 -4 144 130\">\r\n\t\t\t\t\t<g transform=\"translate(0,-175)\" css={iconStyle}>\r\n\t\t\t\t\t\t<HexShape></HexShape>\r\n\t\t\t\t\t</g>\r\n\t\t\t\t\t<FontAwesomeIcon icon={icon} transform=\"shrink-8 left-0.5 up-0.5\" />\r\n\t\t\t\t\t<HexLightsShadows></HexLightsShadows>\r\n\t\t\t\t</svg>\r\n\t\t\t) : (\r\n\t\t\t\t<HexBg></HexBg>\r\n\t\t\t)}\r\n\t\t\t<div css={bgStyle}>{ props.letter }</div>\r\n\t\t</div>\r\n\r\n\treturn hex;\r\n}\r\n\r\nexport { HexTypes, HexTypesArray };\r\n\r\nexport default Hex;","/** @jsx jsx */\r\n\r\nimport { jsx } from \"@emotion/core\";\r\nimport Hex from \"../game/Hex\"\r\n\r\n// Main screen.\r\nfunction Main(props) {\r\n\t// Style\r\n\tconst style = {\r\n\t\theight: \"100%\",\r\n\t\tdisplay: \"flex\",\r\n\t\tflexDirection: \"column\",\r\n\t\tfontSize: (25 * props.data.gameRatio) + \"vmin\",\r\n\t\talignItems: \"center\",\r\n\t\tjustifyContent: \"center\"\r\n\t};\r\n\r\n\tconst titleStyle = {\r\n\t\tfilter: \"drop-shadow(0px 0px 5px black)\"\r\n\t};\r\n\r\n\tconst buttonsStyle = {\r\n\t\twidth: \"100%\",\r\n\t\tdisplay: \"flex\"\r\n\t};\r\n\r\n\tconst hexStyle = {\r\n\t\twidth: 0.35 * Math.min(props.data.gameWidth, props.data.gameHeight)\r\n\t}\r\n\r\n\tlet buttons = [\r\n\t\t<Hex type=\"play\" css={hexStyle} onClick={() => props.events.play()} key=\"0\"></Hex>,\r\n\t\t<Hex type=\"ranking\" css={hexStyle} onClick={() => props.events.ranking()} key=\"1\"></Hex>\r\n\t];\r\n\r\n\tif (props.data.landscape) {\r\n\t\tbuttons = \r\n\t\t\t<div css={buttonsStyle}>\r\n\t\t\t\t<div className=\"filler\"></div>\r\n\t\t\t\t\t{ buttons }\r\n\t\t\t\t<div className=\"filler\"></div>\r\n\t\t\t</div>\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div css={style}>\r\n\t\t\t<div css={titleStyle}>Hex 3</div>\r\n\t\t\t{ buttons }\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Main;","/** @jsx jsx */\r\n\r\nimport { jsx } from \"@emotion/core\";\r\nimport Hex, { HexTypes } from \"./Hex\"\r\nimport { useEffect } from \"react\";\r\nimport Util from \"../Util\";\r\n\r\nconst uiBgImage = `linear-gradient(0deg, ${Util.colors.bg1}, ${Util.colors.bg2})`;\r\n\r\n// Total score.\r\nfunction ScoreAndMoves(props) {\r\n\t// Label style.\r\n\tconst labelStyle = {\r\n\t\tpadding: 6\r\n\t};\r\n\r\n\t// Hex style.\r\n\tconst hexStyle = {\r\n\t\tposition: \"relative\",\r\n\t\twidth: props.data.landscape ? \"100%\" : \"20%\"\r\n\t};\r\n\r\n\t// Text style.\r\n\tconst textStyle = {\r\n\t\tposition: \"absolute\",\r\n\t\ttop: 0,\r\n\t\twidth: \"100%\",\r\n\t\theight: \"100%\",\r\n\t\tdisplay: \"flex\",\r\n\t\talignItems: \"center\",\r\n\t\tjustifyContent: \"center\"\r\n\t};\r\n\r\n\t// Style\r\n\tconst style = {\r\n\t\twidth: props.data.landscape ? props.data.uiSize : \"100%\",\r\n\t\tzIndex: 10,\r\n\t\tbackgroundImage: uiBgImage,\r\n\t\tdisplay: \"flex\",\r\n\t\tflexDirection: props.data.landscape ? \"column\" : \"row\",\r\n\t\tpadding: 4,\r\n\t\talignItems: \"center\",\r\n\t\tfontWeight: \"bold\"\r\n\t};\r\n\r\n\t// Total score and moves.\r\n\tconst scoreAndMoves = \r\n\t\t<div css={[style, {...props.style}]}>\r\n\t\t\t<div css={hexStyle}>\r\n\t\t\t\t<Hex></Hex>\r\n\t\t\t\t<div css={textStyle}>{ props.gameSession.score }</div>\r\n\t\t\t</div>\r\n\t\t\t<div css={[labelStyle, { flexGrow: 1 }]}>Score</div>\r\n\t\t\t<div css={labelStyle}>Moves<br />Left</div>\r\n\t\t\t<div css={hexStyle}>\r\n\t\t\t\t<Hex></Hex>\r\n\t\t\t\t<div css={textStyle}>{ props.gameSession.moves }</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\r\n\treturn scoreAndMoves;\r\n}\r\n\r\n// Hexes powers.\r\nfunction HexesPowers(props) {\r\n\t// Effects\r\n\tuseEffect(() => {\r\n\t\t// Finds scores positions.\r\n\t\tlet pos = {};\r\n\t\tObject.values(HexTypes).forEach(ht => {\r\n\t\t\tlet score = document.getElementById(`score_${ht}`);\r\n\t\t\tpos[ht] = score.getBoundingClientRect();\r\n\t\t});\r\n\t\t\r\n\t\t// Sends scores positions to game controller.\r\n\t\tprops.onScoresPositions(pos);\r\n\t});\r\n\r\n\t// Scores hexes.\r\n\tconst scores = Object.values(HexTypes).map(ht => {\r\n\t\tconst elementStyle = {\r\n\t\t\tpadding: 4,\r\n\t\t\tflexGrow: 1\r\n\t\t};\r\n\t\tconst hexStyle = {\r\n\t\t\twidth: \"100%\"\r\n\t\t};\r\n\t\treturn (\r\n\t\t\t<div css={elementStyle} key={ht} id={`score_${ht}`}>\r\n\t\t\t\t<Hex type={ht} css={hexStyle}></Hex>\r\n\t\t\t</div>\r\n\t\t);\r\n\t})\r\n\r\n\t// Style\r\n\tlet uiStyle = {\r\n\t\tdisplay: \"flex\",\r\n\t\tflexDirection: props.data.landscape ? \"column\" : \"row\",\r\n\t\twidth: props.data.landscape ? props.data.uiSize : \"100%\",\r\n\t\tzIndex: 1,\r\n\t\tbackgroundImage: uiBgImage\r\n\t};\r\n\r\n\tlet ui =\r\n\t\t<div css={uiStyle}>\r\n\t\t\t{ scores }\r\n\t\t</div>\r\n\r\n\treturn ui;\r\n}\r\n\r\nexport { ScoreAndMoves, HexesPowers };","// Util functions for hexagon calculations.\r\nconst HexUtil = {\r\n\t// Directions\r\n\tN: \"N\",\r\n\tNE: \"NE\",\r\n\tSE: \"SE\",\r\n\tS: \"S\",\r\n\tSW: \"SW\",\r\n\tNW: \"NW\",\r\n\r\n\t// Returns the direction between two hexes.\r\n\tgetDirection: function(hexFrom, hexTo) {\r\n\t\t// Same column.\r\n\t\tif (hexFrom.x === hexTo.x) {\r\n\t\t\t// Checks if they are close.\r\n\t\t\tif (hexFrom.y === hexTo.y + 1) return HexUtil.N;\r\n\t\t\tif (hexFrom.y === hexTo.y - 1) return HexUtil.S;\r\n\r\n\t\t} else if (hexFrom.x === hexTo.x - 1) {\r\n\t\t\tif (hexFrom.y === hexTo.y) return HexUtil.SE;\r\n\t\t\tif (hexFrom.y === hexTo.y + 1) return HexUtil.NE;\r\n\r\n\t\t} else if (hexFrom.x === hexTo.x + 1) {\r\n\t\t\tif (hexFrom.y === hexTo.y) return HexUtil.NW;\r\n\t\t\tif (hexFrom.y === hexTo.y - 1) return HexUtil.SW;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t},\r\n\r\n\t// Returns an adjacent hex from a given direction.\r\n\tgetHex: (board, x, y, direction) => {\r\n\t\t// Returns an hex from the board.\r\n\t\tconst getHex = (x, y) => {\r\n\t\t\treturn board[x] ? board[x][y] : null;\r\n\t\t};\r\n\r\n\t\t// Calculates the destination position.\r\n\t\tlet toHex;\r\n\t\tswitch (direction) {\r\n\t\t\tcase HexUtil.N: toHex = getHex(x, y-1); break;\r\n\t\t\tcase HexUtil.NE: toHex = getHex(x+1, y-1); break;\r\n\t\t\tcase HexUtil.NW: toHex = getHex(x-1, y); break;\r\n\t\t\tcase HexUtil.S: toHex = getHex(x, y+1); break;\r\n\t\t\tcase HexUtil.SE: toHex = getHex(x+1, y); break;\r\n\t\t\tcase HexUtil.SW: toHex = getHex(x-1, y+1); break;\r\n\t\t\tdefault: toHex = null; break;\r\n\t\t}\r\n\r\n\t\treturn toHex;\r\n\t},\r\n\r\n\t// Finds the matches in a board in a given direction.\r\n\tfindMatchesFor: (board, hex, direction) => {\r\n\t\t// Declarations\r\n\t\tlet matches = [];\r\n\t\tlet match;\r\n\r\n\t\t// Finds first valid hex.\r\n\t\twhile (hex && !hex.type) hex = HexUtil.getHex(board, hex.x, hex.y, direction);\r\n\r\n\t\t// Validates hex.\r\n\t\tif (!hex) return [];\r\n\r\n\t\t// Adds first hex to match.\r\n\t\tmatch = [hex];\r\n\r\n\t\t// Get next hex.\r\n\t\thex = HexUtil.getHex(board, hex.x, hex.y, direction);\r\n\t\twhile (hex && hex.type) {\r\n\t\t\t// Checks if this hex type matches the type of the match.\r\n\t\t\tif (hex.type === match[0].type) {\r\n\t\t\t\t// Adds new hex to the current match.\r\n\t\t\t\tmatch.push(hex);\r\n\r\n\t\t\t\t// Check if match is valid.\r\n\t\t\t\tif (match.length === 3) matches.push(match);\r\n\r\n\t\t\t} else {\r\n\t\t\t\t// Starts a new possible match.\r\n\t\t\t\tmatch = [hex];\r\n\t\t\t}\r\n\r\n\t\t\t// Next hex.\r\n\t\t\thex = HexUtil.getHex(board, hex.x, hex.y, direction);\r\n\t\t}\r\n\t\t\r\n\t\treturn matches;\r\n\t},\r\n\r\n\t// Finds the matches in a board.\r\n\tfindMatches: (board) => {\r\n\t\t// Declarations\r\n\t\tlet matches = [];\r\n\r\n\t\t// Searches matches for south direction.\r\n\t\tfor (let x = 0; x < board.length; x++) {\r\n\t\t\tmatches = matches.concat(HexUtil.findMatchesFor(board, board[x][0], HexUtil.S));\r\n\t\t}\r\n\r\n\t\t// Searches matches for southeast direction.\r\n\t\tfor (let y = 0; y < board.length; y++) {\r\n\t\t\tmatches = matches.concat(HexUtil.findMatchesFor(board, board[0][y], HexUtil.SE));\r\n\t\t}\r\n\r\n\t\t// Searches matches for southwest direction.\r\n\t\tfor (let x = 0; x < board.length; x++) {\r\n\t\t\tmatches = matches.concat(HexUtil.findMatchesFor(board, board[x][0], HexUtil.SW));\r\n\t\t}\r\n\t\tfor (let y = 1; y < board.length; y++) {\r\n\t\t\tmatches = matches.concat(HexUtil.findMatchesFor(board, board[board.length - 1][y], HexUtil.SW));\r\n\t\t}\r\n\r\n\t\treturn matches;\r\n\t}\r\n};\r\n\r\nexport default HexUtil;","/** @jsx jsx */\r\n\r\nimport { jsx, css, keyframes } from \"@emotion/core\";\r\nimport HexUtil from \"./HexUtil\"\r\nimport Hex, { HexTypesArray, HexTypes } from \"./Hex\"\r\nimport bg from \"./board.svg\"\r\nimport { useState, useEffect } from \"react\";\r\nimport Util from \"../Util\";\r\n\r\n/**\r\n * State machine:\r\n * Init -> Ready\r\n * Ready -> (match) ? Match : Unmatch\r\n * Unmatch -> Ready\r\n * Match -> Explosion\r\n * Explosion -> Fall\r\n * Fall -> (match) ? Match : Ready\r\n */\r\nconst\r\n\tGS_INIT = \"init\",\r\n\tGS_READY = \"ready\",\r\n\tGS_UNMATCH = \"unmatch\",\r\n\tGS_MATCH = \"match\",\r\n\tGS_EXPLOSION = \"explosion\",\r\n\tGS_FALL = \"fall\",\r\n\tGS_OVER = \"over\";\r\n\r\n// Constants\r\nconst\r\n\tnoHex = { x: -1, y: -1, type: \"none\" },\r\n\tleftIni = 10,\r\n\ttopIni = -14,\r\n\tleftOffset = 11,\r\n\ttopOffset = 6.5;\r\n\r\n// Declarations\r\nlet typesBuffer = [];\r\n\r\n// Returns a type from the type buffer.\r\nconst getType = () => {\r\n\t// Keeps the buffer with a minimum size.\r\n\twhile (typesBuffer.length <= 5) typesBuffer = typesBuffer.concat(Object.values(HexTypes));\r\n\r\n\t// Selects a random type.\r\n\treturn typesBuffer.splice(Util.randomIndex(typesBuffer), 1)[0];\r\n};\r\n\r\n// Inits a new game.\r\nconst init = () => {\r\n\t// Builds board.\r\n\tconst gridSize = 7;\r\n\tlet board = [];\r\n\tfor (let x = 0; x < gridSize; x++) {\r\n\t\tboard.push([]);\r\n\t\tfor (let y = 0; y < gridSize; y++) {\r\n\t\t\t// Checks if hex is out of the board.\r\n\t\t\tif ((x**2 + y**2 <= 4) || ((gridSize - x - 1)**2 + (gridSize - y - 1)**2 <= 4)) {\r\n\t\t\t\tboard[x][y] = { x: x, y: y };\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\t// Game board.\r\n\t\t\tboard[x][y] = { x: x, y: y, type: getType(), state: \"init\" };\r\n\t\t\tboard[x][y].fallFrom = { x: x, y: y - (gridSize + 3) };\r\n\t\t}\r\n\t}\r\n\r\n\t// Undoes matches.\r\n\tlet matches = HexUtil.findMatches(board);\r\n\tlet totalCount = 100;\r\n\twhile (matches.length > 0 && totalCount > 0) {\r\n\t\t// Replaces some types.\r\n\t\tmatches.forEach(match => {\r\n\t\t\tmatch[Util.randomIndex(match)].type = getType();\r\n\t\t});\r\n\r\n\t\t// Checks for new matches.\r\n\t\tmatches = HexUtil.findMatches(board);\r\n\t\ttotalCount--;\r\n\t}\r\n\r\n\treturn board;\r\n};\r\n\r\n// Hex board.\r\nfunction Board(props) {\r\n\t// State\r\n\tlet [ gameState, setGameState ] = useState(GS_INIT);\r\n\tlet [ slots, setSlots ] = useState(null);\r\n\tlet [ selectedHex, setSelectedHex ] = useState(noHex);\r\n\tlet [ matches, setMatches ] = useState([]);\r\n\tlet [ hexes ] = useState(init());\r\n\tlet qtdAnimations = 0;\r\n\r\n\t// Traverses all hexes in board.\r\n\tconst forHex = (onHex) => {\r\n\t\tfor (let x = 0; x < hexes.length; x++) {\r\n\t\t\tfor (let y = hexes.length - 1; y >= 0; y--) {\r\n\t\t\t\t// Ignores hexes out of the board.\r\n\t\t\t\tif (!hexes[x][y].type) continue;\r\n\r\n\t\t\t\t// Apply to hex.\r\n\t\t\t\tonHex(hexes[x][y], x, y);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t// Calculates the position of an hex.\r\n\tconst calcPos = (hex, unit = \"%\") => {\r\n\t\treturn {\r\n\t\t\tleft: (leftIni + hex.x * leftOffset) + unit,\r\n\t\t\ttop: (topIni + hex.x * topOffset + hex.y * 2 * topOffset) + unit\r\n\t\t}\r\n\t};\r\n\r\n\t// Builds the initial animation for an hex.\r\n\tconst buildAnimationInit = (hex) => {\r\n\t\tconst pos1 = calcPos(hex.fallFrom);\r\n\t\tconst pos2 = calcPos(hex);\r\n\t\tconst anim = keyframes({\r\n\t\t\tfrom: pos1,\r\n\t\t\tto: pos2\r\n\t\t});\r\n\r\n\t\tconst bottomPos = ((hexes.length >> 1) + (hexes.length - 1) * 2);\r\n\t\tconst hexPos = (hex.x + hex.y * 2);\r\n\t\tlet animationDuration = 1 + (hex.y - hex.fallFrom.y) / hexes.length - hexPos / bottomPos;\r\n\t\tif (hex.y > hexes.length) {\r\n\t\t\tanimationDuration += 2;\r\n\t\t}\r\n\r\n\t\treturn `${anim} ${animationDuration}s ease`;\r\n\t};\r\n\r\n\t// Builds the unmatch animation for an hex.\r\n\tconst buildAnimationUnmatch = (hex) => {\r\n\t\tconst pos1 = calcPos(hex);\r\n\t\tconst pos2 = calcPos(hex.target);\r\n\t\tconst anim = keyframes`\r\n\t\t\tfrom, to { ${pos1} }\r\n\t\t\t50% { ${pos2} }\r\n\t\t`;\r\n\r\n\t\treturn `${anim} 0.5s ease`;\r\n\t};\r\n\r\n\t// Builds the match animation for an hex.\r\n\tconst buildAnimationMatch = (hex) => {\r\n\t\tconst pos1 = calcPos(hex);\r\n\t\tconst pos2 = calcPos(hex.target);\r\n\t\tconst anim = keyframes`\r\n\t\t\tfrom { ${pos2} }\r\n\t\t\tto { ${pos1} }\r\n\t\t`;\r\n\r\n\t\treturn `${anim} 0.25s ease`;\r\n\t};\r\n\r\n\t// Builds the explosion animation for an hex.\r\n\tconst buildAnimationExplosion = (hex) => {\r\n\t\t// Calculates destination position.\r\n\t\tconst boardRect = document.getElementById(\"board\").getBoundingClientRect();\r\n\t\tconst hexRect = document.getElementById(hex.x + \"_\" + hex.y).getBoundingClientRect();\r\n\t\tconst scoreRect = props.getScoresPositions()[hex.type];\r\n\t\tconst dest = {\r\n\t\t\tleft: Math.round(100 * (scoreRect.x - boardRect.x + (scoreRect.width - hexRect.width) / 2) / boardRect.width) + \"%\",\r\n\t\t\ttop: Math.round(100 * (scoreRect.y - boardRect.y + (scoreRect.width - hexRect.height) / 2) / boardRect.height) + \"%\"\r\n\t\t};\r\n\r\n\t\t// Calculates explosion destination.\r\n\t\tconst pos1 = calcPos(hex, 0);\r\n\t\tconst pos2 = calcPos(hex.target, 0);\r\n\t\tpos2.left = pos1.left + 0.3 * (pos1.left - pos2.left) + \"%\";\r\n\t\tpos2.top = pos1.top + 0.3 * (pos1.top - pos2.top) + \"%\";\r\n\t\tpos1.left += \"%\";\r\n\t\tpos1.top += \"%\";\r\n\r\n\t\t// Builds animation.\r\n\t\tconst anim = keyframes`\r\n\t\t\tfrom { ${pos1} }\r\n\t\t\t30% { ${pos2} }\r\n\t\t\tto { ${dest} }\r\n\t\t`;\r\n\r\n\t\treturn `${anim} 1.2s ease`;\r\n\t};\r\n\r\n\t// Builds the over animation for an hex.\r\n\tconst buildAnimationOver = (hex) => {\r\n\t\t// Calculates positions.\r\n\t\thex.fallFrom = { x: hex.x, y: hex.y };\r\n\t\thex.y += 2 * hexes.length;\r\n\r\n\t\treturn buildAnimationInit(hex);\r\n\t};\r\n\r\n\t// Builds the animation for an hex.\r\n\tconst buildAnimation = (hex) => {\r\n\t\t// Declarations\r\n\t\tlet animation;\r\n\r\n\t\t// Checks hex state.\r\n\t\tswitch (hex.state) {\r\n\t\t\tcase GS_INIT: animation = buildAnimationInit(hex); break;\r\n\t\t\tcase GS_UNMATCH: animation = buildAnimationUnmatch(hex); break;\r\n\t\t\tcase GS_MATCH: animation = buildAnimationMatch(hex); break;\r\n\t\t\tcase GS_EXPLOSION: animation = buildAnimationExplosion(hex); break;\r\n\t\t\tcase GS_FALL: animation = buildAnimationInit(hex); break;\r\n\t\t\tcase GS_OVER: animation = buildAnimationOver(hex); break;\r\n\t\t\tdefault: return;\r\n\t\t}\r\n\r\n\t\t// One more animation.\r\n\t\tqtdAnimations++;\r\n\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t// Handles animation end event.\r\n\tconst onAnimationEnd = (hex) => {\r\n\t\t// Checks if hex is over.\r\n\t\t if (hex.state === GS_OVER) {\r\n\t\t\t// Removes it from board.\r\n\t\t\tdelete hex.type;\r\n\t\t}\r\n\r\n\t\t// One less animation.\r\n\t\tqtdAnimations--;\r\n\r\n\t\t// Checks if there are more active animations.\r\n\t\tif (qtdAnimations > 0) return;\r\n\r\n\t\t// Resets all animations.\r\n\t\tclearHexesStates();\r\n\r\n\t\t// Checks if it was the explosion or unmatch animation.\r\n\t\tif (gameState === GS_EXPLOSION || gameState === GS_UNMATCH) {\r\n\t\t\t// Earn points.\r\n\t\t\tlet pointsEarned = matches.reduce((total, match) => total + match.length, 0);\r\n\r\n\t\t\t// Dispatches match event.\r\n\t\t\tprops.events.onMatch(pointsEarned);\r\n\r\n\t\t\t// Checks if it was the explosion animation.\r\n\t\t\tif (gameState === GS_EXPLOSION) {\r\n\t\t\t\t// Update to fall state.\r\n\t\t\t\tsetGameState(GS_FALL);\r\n\r\n\t\t\t\t// Removes exploded hexes from board.\r\n\t\t\t\tlet explodedHexes = [];\r\n\t\t\t\tmatches.forEach(match => {\r\n\t\t\t\t\tmatch.forEach(hex => {\r\n\t\t\t\t\t\thexes[hex.x][hex.y] = noHex;\r\n\t\t\t\t\t\tif (explodedHexes.indexOf(hex) === -1) {\r\n\t\t\t\t\t\t\texplodedHexes.push(hex);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\t\t\t\t})\r\n\r\n\t\t\t\t// Start the fall animation.\r\n\t\t\t\tforHex((hex, x, y) => {\r\n\t\t\t\t\t// Checks if slot is empty.\r\n\t\t\t\t\tif (hex === noHex) {\r\n\t\t\t\t\t\t// Brings an hex down.\r\n\t\t\t\t\t\tlet yUp = y - 1;\r\n\t\t\t\t\t\tlet hexToFall = hexes[x][yUp];\r\n\r\n\t\t\t\t\t\t// Finds a non empty hex.\r\n\t\t\t\t\t\twhile (hexToFall && hexToFall.type && hexToFall === noHex) {\r\n\t\t\t\t\t\t\tyUp--;\r\n\t\t\t\t\t\t\thexToFall = hexes[x][yUp];\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// Checks if no hexes were available in column.\r\n\t\t\t\t\t\tif (!hexToFall || !hexToFall.type) {\r\n\t\t\t\t\t\t\t// Adds a new hex from the ones that exploded.\r\n\t\t\t\t\t\t\thexToFall = explodedHexes.pop();\r\n\t\t\t\t\t\t\thexToFall.fallFrom = { x: x, y: y - hexes.length - 1 }\r\n\t\t\t\t\t\t\thexToFall.type = Util.randomValue(HexTypesArray);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t// Move hex down.\r\n\t\t\t\t\t\t\thexToFall.fallFrom = { x: hexToFall.x, y: hexToFall.y }\r\n\t\t\t\t\t\t\thexes[x][hexToFall.y] = noHex;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// Adds the fall animation to the hex.\r\n\t\t\t\t\t\thexes[x][y] = hexToFall;\r\n\t\t\t\t\t\thexToFall.x = x;\r\n\t\t\t\t\t\thexToFall.y = y;\r\n\t\t\t\t\t\thexToFall.state = GS_FALL;\r\n\t\t\t\t\t\tbuildAnimation(hexToFall);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\t// Game ready.\r\n\t\t\t\tsetGameReady();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Checks if it was the match or fall animation.\r\n\t\telse if (gameState === GS_MATCH) {\r\n\t\t\t// Starts explosion.\r\n\t\t\tsetExplosionState();\r\n\t\t}\r\n\r\n\t\t// Checks if it was the fall animation.\r\n\t\telse if (gameState === GS_FALL) {\r\n\t\t\t// Looks for new matches.\r\n\t\t\tmatches = HexUtil.findMatches(hexes); \r\n\t\t\tsetMatches(matches);\r\n\r\n\t\t\t// Any?\r\n\t\t\tif (matches.length > 0) {\r\n\t\t\t\t// Starts explosion.\r\n\t\t\t\tsetExplosionState();\r\n\t\t\t} else {\r\n\t\t\t\t// Game ready.\r\n\t\t\t\tsetGameReady();\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Checks if it was the game over animation.\r\n\t\telse if (gameState === GS_OVER) {\r\n\t\t\t// Distaches event to game.\r\n\t\t\tprops.events.onGameOver();\r\n\t\t}\r\n\t};\r\n\r\n\t// Sets game ready state.\r\n\tconst setGameReady = () => {\r\n\t\t// Checks if game is over.\r\n\t\tif (props.gameOver) {\r\n\t\t\t// Starts over animation.\r\n\t\t\tforHex(hex => {\r\n\t\t\t\t// Over state for hex.\r\n\t\t\t\thex.state = GS_OVER;\r\n\t\t\t});\r\n\r\n\t\t\t// Game over.\r\n\t\t\tsetGameState(GS_OVER);\r\n\r\n\t\t\t// Writes game over on board.\r\n\t\t\tbuildSlots(true);\r\n\r\n\t\t} else {\r\n\t\t\t// Game ready.\r\n\t\t\tsetGameState(GS_READY);\r\n\t\t}\r\n\t};\r\n\r\n\t// Sets the explosion state.\r\n\tconst setExplosionState = () => {\r\n\t\t// Sets game state.\r\n\t\tsetGameState(GS_EXPLOSION);\r\n\r\n\t\t// Starts explosion animation.\r\n\t\tmatches.forEach(match => {\r\n\t\t\t// Calculates center of explosion, with a little random noise.\r\n\t\t\tlet explosionCenter = match.reduce((total, hex) => ({ x: total.x + hex.x, y: total.y + hex.y }), noHex);\r\n\t\t\texplosionCenter.x = explosionCenter.x / match.length + 0.5 * Math.random();\r\n\t\t\texplosionCenter.y = explosionCenter.y / match.length + 0.5 * Math.random();\r\n\r\n\t\t\t// Setups hexes.\r\n\t\t\tmatch.forEach(hex => {\r\n\t\t\t\thex.state = GS_EXPLOSION;\r\n\t\t\t\thex.target = explosionCenter;\r\n\t\t\t})\r\n\t\t});\r\n\t};\r\n\r\n\t// Clears hexes states.\r\n\tconst clearHexesStates = () => {\r\n\t\thexes.forEach(hexesX => {\r\n\t\t\thexesX.forEach(hex => {\r\n\t\t\t\tdelete hex.state;\r\n\t\t\t})\r\n\t\t})\r\n\t};\r\n\r\n\t// Builds hexes slots.\r\n\tconst buildSlots = (gameOver = false) => {\r\n\t\t// Initializations\r\n\t\tlet newSlots = [];\r\n\r\n\t\tforHex((hex, x, y) => {\r\n\t\t\t// Position style for slots and hexes.\r\n\t\t\tlet posStyle = calcPos(hex);\r\n\t\t\tposStyle.position = \"absolute\";\r\n\t\t\tposStyle.width = \"14%\";\r\n\r\n\t\t\tlet letter = \"\";\r\n\t\t\tif (gameOver) {\r\n\t\t\t\tif (x === 2 && y === 2) letter = \"G\";\r\n\t\t\t\tif (x === 3 && y === 2) letter = \"A\";\r\n\t\t\t\tif (x === 4 && y === 2) letter = \"M\";\r\n\t\t\t\tif (x === 5 && y === 2) letter = \"E\";\r\n\t\t\t\tif (x === 1 && y === 4) letter = \"O\";\r\n\t\t\t\tif (x === 2 && y === 4) letter = \"V\";\r\n\t\t\t\tif (x === 3 && y === 4) letter = \"E\";\r\n\t\t\t\tif (x === 4 && y === 4) letter = \"R\";\r\n\t\t\t}\r\n\r\n\t\t\t// Slots\r\n\t\t\tnewSlots.push(<Hex data={props.data} letter={letter} css={posStyle} key={\"s_\" + hex.x + \"_\" + hex.y} />);\r\n\t\t});\r\n\r\n\t\tsetSlots(newSlots);\r\n\t};\r\n\tuseEffect(buildSlots, []);\r\n\r\n\t// Builds hexes.\r\n\tlet hexesItems = [];\r\n\r\n\tforHex(hex => {\r\n\t\t// Buids hex animation.\r\n\t\tlet anim = buildAnimation(hex);\r\n\r\n\t\t// Position style for slots and hexes.\r\n\t\tlet hexStyle = calcPos(hex);\r\n\t\thexStyle.position = \"absolute\";\r\n\t\thexStyle.width = \"14%\";\r\n\t\thexStyle.zIndex =  hex.state === GS_EXPLOSION ? 1 : 0;\r\n\r\n\t\t// Hexes\r\n\t\tlet hexItem = <Hex\r\n\t\t\tdata={props.data}\r\n\t\t\tcss={hexStyle}\r\n\t\t\ttype={hex.type}\r\n\t\t\tselected={hex.x === selectedHex.x && hex.y === selectedHex.y}\r\n\t\t\tanimation={anim}\r\n\t\t\tid={hex.x + \"_\" + hex.y}\r\n\t\t\tkey={hex.x + \"_\" + hex.y}\r\n\t\t\tonClick={() => onClickHex(hex)}\r\n\t\t\tonAnimationEnd={() => onAnimationEnd(hex)} />\r\n\r\n\t\thexesItems.push(hexItem);\r\n\t});\r\n\r\n\t// Handles hex click events.\r\n\tlet onClickHex = (hex) => {\r\n\t\t// Checks if clicked hex is far away.\r\n\t\tif (!HexUtil.getDirection(selectedHex, hex)) {\r\n\t\t\t// New selection.\r\n\t\t\tsetSelectedHex(hex);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Dispatches move event.\r\n\t\tprops.events.onMove();\r\n\r\n\t\t// Switches types and looks for a matches.\r\n\t\tlet type = hex.type;\r\n\t\thex.type = selectedHex.type;\r\n\t\tselectedHex.type = type;\r\n\t\tmatches = HexUtil.findMatches(hexes); \r\n\t\tsetMatches(matches); \r\n\r\n\t\t// Makes hexes reference each other.\r\n\t\thex.target = selectedHex;\r\n\t\tselectedHex.target = hex;\r\n\r\n\t\t// No matches?\r\n\t\tif (matches.length === 0) {\r\n\t\t\t// Restores types.\r\n\t\t\tselectedHex.type = hex.type;\r\n\t\t\thex.type = type;\r\n\r\n\t\t\t// Sets unmatch animation.\r\n\t\t\tsetGameState(GS_UNMATCH);\r\n\t\t\tselectedHex.state = hex.state = GS_UNMATCH;\r\n\t\t\t\r\n\t\t} else {\r\n\t\t\t// Sets match animation.\r\n\t\t\tsetGameState(GS_MATCH);\r\n\t\t\tselectedHex.state = hex.state = GS_MATCH;\r\n\t\t}\r\n\r\n\t\t// Resets selection.\r\n\t\tsetSelectedHex(noHex);\r\n\t};\r\n\r\n\t// Board style\r\n\tlet style = css({\r\n\t\tposition: \"relative\",\r\n\t\twidth: props.data.boardSize,\r\n\t\theight: props.data.boardSize,\r\n\t\tbackgroundImage: `URL(${bg})`,\r\n\t\tbackgroundSize: \"contain\"\r\n\t});\r\n\r\n\t// Builds board.\r\n\tlet board =\r\n\t\t<div css={style} id=\"board\">\r\n\t\t\t{ slots }\r\n\t\t\t{ hexesItems }\r\n\t\t</div>\r\n\r\n\treturn board;\r\n}\r\n\r\nexport default Board;","/** @jsx jsx */\n\nimport { jsx } from \"@emotion/core\";\nimport { ScoreAndMoves, HexesPowers } from './UI';\nimport Board from './Board';\nimport { useState } from \"react\";\n\nfunction Game(props) {\n\t// Game state.\n\tlet [ gameSession, setGameSession ] = useState({ score: 0, moves: 20 });\n\tlet [ gameOver, setGameOver ] = useState(false);\n\n\t// Board events.\n\tconst boardEvents = {\n\t\t// Handles move event.\n\t\tonMove: () => {\n\t\t\t// Updates game state.\n\t\t\tgameSession.moves--;\n\t\t\tsetGameSession({ score: gameSession.score, moves: gameSession.moves });\n\t\t\tsetGameOver(gameSession.moves === 0);\n\t\t},\n\n\t\t// Handles match event.\n\t\tonMatch: (pointsEarned) => {\n\t\t\t// Updates game state.\n\t\t\tsetGameSession({ score: gameSession.score + pointsEarned, moves: gameSession.moves });\n\t\t},\n\n\t\t// Handles game over event.\n\t\tonGameOver: () => {\n\t\t\t// Dispatches event to app.\n\t\t\tprops.events.ranking(gameSession.score);\n\t\t}\n\t};\n\n\tlet scoresPositions = [];\n\n\t// Style\n\tconst style = {\n\t\theight: \"100%\",\n\t\tdisplay: \"flex\",\n\t\tflexDirection: props.data.landscape ? \"row\" : \"column\"\n\t};\n\n\t// Board bg style.\n\tconst bgStyle = {\n\t\tdisplay: \"flex\",\n\t\tflexDirection: props.data.landscape ? \"row\" : \"column\",\n\t\tflexGrow: 1,\n\t\twidth: props.boardSize,\n\t\tpointerEvents: (gameSession.moves > 0) ? \"all\" : \"none\"\n\t};\n\n\treturn (\n\t\t<div className=\"Game\" css={style}>\n\t\t\t<ScoreAndMoves data={props.data} gameSession={gameSession}></ScoreAndMoves>\n\t\t\t<HexesPowers data={props.data} onScoresPositions={(pos) => scoresPositions = pos}></HexesPowers>\n\t\t\t<div css={bgStyle}>\n\t\t\t\t<div className=\"filler\"></div>\n\t\t\t\t<Board\n\t\t\t\t\tdata={props.data}\n\t\t\t\t\tgameOver={gameOver}\n\t\t\t\t\tgetScoresPositions={() => scoresPositions}\n\t\t\t\t\tevents={boardEvents}></Board>\n\t\t\t\t<div className=\"filler\"></div>\n\t\t\t</div>\n\t\t</div>\n  \t);\n}\n\nexport default Game;\n","/** @jsx jsx */\r\n\r\nimport { jsx } from \"@emotion/core\";\r\nimport Hex from \"../game/Hex\";\r\nimport Util from \"../Util\";\r\n\r\n// Default ranking.\r\nconst defaultRanking = [\r\n\t{ score: 100, name: \"Rodris\" },\r\n\t{ score: 90, name: \"Anne\" },\r\n\t{ score: 80, name: \"Harry\" },\r\n\t{ score: 70, name: \"Fisch\" },\r\n\t{ score: 60, name: \"Wendy\" },\r\n\t{ score: 50, name: \"Mary\" },\r\n\t{ score: 40, name: \"Phill\" },\r\n\t{ score: 30, name: \"Leah\" },\r\n\t{ score: 20, name: \"Rey\" },\r\n\t{ score: 10, name: \"Noah\" }\r\n];\r\n\r\n// Ranking screen.\r\nfunction Ranking(props) {\r\n\t// Tries to load saved ranking.\r\n\tlet savedRanking = JSON.parse(localStorage.getItem(\"ranking\"));\r\n\r\n\t// State\r\n\t//const [ ranking, setRanking ] = useState(savedRanking || defaultRanking);\r\n\tlet ranking = (savedRanking || defaultRanking);\r\n\tlet rating = { score: props.score, new: true };\r\n\r\n\t// Checks if a new score is in ranking.\r\n\tlet newPos = ranking.findIndex(rating => rating.score < props.score);\r\n\r\n\tif (newPos >= 0) {\r\n\t\t// Adds new rating to the ranking.\r\n\t\tranking.splice(newPos, 0, rating);\r\n\t\tranking.pop();\r\n\t}\r\n\r\n\t// Updates rating name.\r\n\tconst onRatingName = (event) => {\r\n\t\trating.name = event.target.value;\r\n\t};\r\n\r\n\t// Style\r\n\tconst style = {\r\n\t\theight: \"100%\",\r\n\t\tdisplay: \"flex\",\r\n\t\tflexDirection: \"column\",\r\n\t\tfontSize: (25 * props.data.gameRatio) + \"vmin\",\r\n\t\ttextAlign: \"center\",\r\n\t\toverflowY: \"auto\"\r\n\t};\r\n\r\n\tconst titleStyle = {\r\n\t\tfilter: \"drop-shadow(0px 0px 5px black)\",\r\n\t\tmarginBottom: 10\r\n\t};\r\n\r\n\tconst ratingStyle = {\r\n\t\tposition: \"relative\",\r\n\t\tfontSize: (10 * props.data.gameRatio) + \"vmin\",\r\n\t\ttextAlign: \"left\",\r\n\t\tmargin: \"4px 4px\",\r\n\t\tpadding: \"4px 10px\",\r\n\t\tborderRadius: 15,\r\n\t\tbackgroundImage: `linear-gradient(45deg, ${Util.colors.bg2}, transparent)`,\r\n\t\tfilter: \"drop-shadow(0px 0px 5px black)\"\r\n\t};\r\n\r\n\tconst inputStyle = {\r\n\t\twidth: \"75%\",\r\n\t\tcolor: Util.colors.fontColor,\r\n\t\tborder: \"none\",\r\n\t\tbackgroundColor: \"transparent\",\r\n\t\tfontSize: (10 * props.data.gameRatio) + \"vmin\"\r\n\t};\r\n\r\n\tconst hexStyle = {\r\n\t\tposition: \"absolute\",\r\n\t\ttop: 0,\r\n\t\tright: 8,\r\n\t\twidth: 0.17 * props.data.minSize\r\n\t};\r\n\r\n\tconst scoreStyle = {\r\n\t\t...hexStyle,\r\n\t\ttop: 13,\r\n\t\ttextAlign: \"center\",\r\n\t\tfontSize: (6 * props.data.gameRatio) + \"vmin\"\r\n\t};\r\n\r\n\tconst hexButtonStyle = {\r\n\t\twidth: \"20%\",\r\n\t\tmargin: \"auto\"\r\n\t};\r\n\r\n\t// Builds ratings.\r\n\tconst ratings = ranking.map((rating, i) => \r\n\t\t<div css={ratingStyle} key={i}>\r\n\t\t\t{ rating.new ? (\r\n\t\t\t\t<div><input autoFocus type=\"text\" css={inputStyle} onChange={onRatingName}></input></div>\r\n\t\t\t) : (\r\n\t\t\t\t<div>{ rating.name }</div>\r\n\t\t\t)}\r\n\t\t\t<Hex css={hexStyle}>ok</Hex>\r\n\t\t\t<div css={scoreStyle}>{ rating.score }</div>\r\n\t\t</div>\r\n\t);\r\n\r\n\t// Confirms ranking.\r\n\tconst onOk = () => {\r\n\t\t// Updates ranking.\r\n\t\tif (rating.name) {\r\n\t\t\tdelete rating.new;\r\n\t\t}\r\n\t\t//setRanking(ranking.slice(0));\r\n\t\tlocalStorage.setItem(\"ranking\", JSON.stringify(ranking));\r\n\r\n\t\t// Returns to main scree.\r\n\t\tprops.events.main();\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div css={style}>\r\n\t\t\t<div css={titleStyle}>Ranking</div>\r\n\t\t\t{ ratings }\r\n\t\t\t<div>\r\n\t\t\t\t<Hex css={hexButtonStyle} type=\"back\" onClick={onOk}></Hex>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Ranking;","/** @jsx jsx */\n\nimport { jsx } from \"@emotion/core\"\nimport Main from './main/Main';\nimport Game from './game/Game';\nimport { useState, useEffect } from \"react\";\nimport Ranking from \"./ranking/Ranking\";\nimport Util from \"./Util\";\n\n// Setups game data.\nfunction init() {\n\t// Retrieves body dimensions.\n\tconst bodyRect = document.body.getBoundingClientRect();\n\n\t// App data.\n\tlet data = {};\n\tdata.landscape = (bodyRect.height < bodyRect.width && bodyRect.height < 700);\n\tif (data.landscape) {\n\t\tdata.gameHeight = Math.min(bodyRect.height, 500);\n\t\tdata.gameWidth = Math.min(bodyRect.width, 9 * data.gameHeight / 5);\n\t\tdata.boardSize = Math.min(data.gameHeight, 5 * data.gameWidth / 7);\n\t} else {\n\t\tdata.gameWidth = Math.min(bodyRect.width, 500);\n\t\tdata.gameHeight = Math.min(bodyRect.height, 9 * data.gameWidth / 5);\n\t\tdata.boardSize = Math.min(data.gameWidth, 5 * data.gameHeight / 7);\n\t}\n\tdata.minSize = Math.min(data.gameWidth, data.gameHeight);\n\tdata.uiSize = data.boardSize / 5;\n\tdata.gameRatio = data.boardSize / Math.min(bodyRect.width, bodyRect.height)\n\n\t// App style.\n\tdata.style = {\n\t\twidth: data.gameWidth,\n\t\theight: data.gameHeight,\n\t\tmargin: \"auto\",\n\t\toverflow: \"hidden\",\n\t\tcolor: Util.colors.fontColor,\n\t\tbackgroundImage: `linear-gradient(-45deg, ${Util.colors.bg1}, ${Util.colors.bg2})`\n\t};\n\n\treturn data;\n}\n\nfunction App() {\n\t// Available app states.\n\tconst\n\t\tAS_MAIN = \"main\",\n\t\tAS_GAME = \"game\",\n\t\tAS_RANK = \"ranking\";\n\n\t// Current app state.\n\tlet [ data, setData ] = useState(init());\n\tlet [ state, setState ] = useState(AS_MAIN);\n\tlet [ score, setScore ] = useState(0);\n\tlet appContent;\n\n\t// Handles device orientation change event.\n\tuseEffect(() => {\n\t\tconst updateAppSize = () => {\n\t\t\tsetTimeout(() => {\n\t\t\t\tsetData(init());\n\t\t\t}, 50);\n\t\t};\n\t\twindow.addEventListener(\"orientationchange\", updateAppSize);\n\t\twindow.addEventListener(\"resize\", updateAppSize);\n\t}, []);\n\n\t// App events.\n\tconst events = {\n\t\t// Enters main screen.\n\t\tmain: () => {\n\t\t\tsetState(AS_MAIN);\n\t\t},\n\n\t\t// Starts a game.\n\t\tplay: () => {\n\t\t\tsetState(AS_GAME);\n\t\t},\n\n\t\t// Shows ranking screen.\n\t\tranking: (newScore) => {\n\t\t\tsetScore(newScore);\n\t\t\tsetState(AS_RANK);\n\t\t}\n\t};\n\n\tswitch (state) {\n\t\tcase AS_MAIN: appContent = <Main events={events} data={data}></Main>; break;\n\t\tcase AS_GAME: appContent = <Game events={events} data={data}></Game>; break;\n\t\tcase AS_RANK: appContent = <Ranking events={events} data={data} score={score}></Ranking>; break;\n\t\tdefault: break;\n\t}\n\n\treturn (\n\t\t<div className=\"App\" css={data.style}>\n\t\t\t{ appContent }\n\t\t</div>\n  \t);\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(<App></App>, document.getElementById('root'));\n\n"],"sourceRoot":""}